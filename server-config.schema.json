{
  "type": "object",
  "properties": {
    "compressResponse": {
      "type": "boolean",
      "default": true,
      "description": "\n    Use the compression middleware package to enable gzip compression of\n    responses. For high-traffic websites in production, it is strongly\n    recommended to offload compression from the application server typically in\n    a reverse proxy (e.g., Nginx). In that case, you should not use compression\n    middleware."
    },
    "basicAuthentication": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "minLength": 1,
          "description": "Username of the user that is used for login."
        },
        "password": {
          "type": "string",
          "minLength": 1,
          "description": "Password of the user that is used for login."
        }
      },
      "required": ["username", "password"],
      "additionalProperties": false,
      "description": "Configuration for basic authentication. If not defined basic authentication will be disabled."
    },
    "rateLimit": {
      "type": "object",
      "properties": {
        "points": {
          "type": "integer",
          "minimum": 0,
          "default": 5,
          "description": "Maximum number of points can be consumed over duration."
        },
        "duration": {
          "type": "integer",
          "minimum": 0,
          "default": 1,
          "description": "Number of seconds before consumed points are reset, starting from the time of the first consumed point on a key. Points will be reset every second if the duration is set to 1 second."
        },
        "blockDuration": {
          "type": "integer",
          "minimum": 0,
          "default": 5,
          "description": "If blockDuration is a positive number and more points are consumed than available, the limiter prolongs points lifetime for blockDuration seconds. It rejects further consume calls for that key during this blockDuration time."
        }
      },
      "additionalProperties": false,
      "default": {
        "points": 5,
        "duration": 1,
        "blockDuration": 5
      },
      "description": "Rate limits basic authentication requests. Note that this uses simple in-memory storage of requests, which means that the actual allowed rate will be higher when multiple terriajs-server processes. The first two wait times after `freeRetries` are `minWait`. Successive wait times are the sum of the two previous wait times, up to `maxWait`."
    },
    "port": {
      "type": "integer",
      "minimum": 0,
      "maximum": 65535,
      "default": 3001,
      "description": "\n    Port to listen on. Overridden by the --port command line setting."
    },
    "initPaths": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "description": "\n    List of directories where init (catalog) files will be sought, before\n    defaulting to wwwroot/init. This helps with managing catalog files\n    separately from the main codebase."
    },
    "share": {
      "type": "object",
      "properties": {
        "newPrefix": {
          "type": "string",
          "minLength": 1,
          "description": "Which service should be used when new URLs are requested."
        },
        "maxRequestSize": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "default": 200,
          "description": "Max payload size for share in kb."
        },
        "availablePrefixes": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "service": {
                    "type": "string",
                    "const": "gist"
                  },
                  "prefix": {
                    "type": "string",
                    "minLength": 1
                  },
                  "apiUrl": {
                    "type": "string",
                    "format": "uri",
                    "default": "https://api.github.com/gists",
                    "description": "Url of gist api."
                  },
                  "accessToken": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Github access token with access to create gist."
                  },
                  "userAgent": {
                    "type": "string",
                    "default": "TerriaJS-Server",
                    "description": "User agent HTTP Header to set"
                  },
                  "fileName": {
                    "type": "string",
                    "default": "usercatalog.json",
                    "description": "The filename to give to the gist file"
                  },
                  "description": {
                    "type": "string",
                    "default": "User-created catalog",
                    "description": "The description attached to each Gist"
                  }
                },
                "required": ["service", "prefix"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "service": {
                    "type": "string",
                    "const": "s3"
                  },
                  "prefix": {
                    "$ref": "#/properties/share/properties/availablePrefixes/items/anyOf/0/properties/prefix"
                  },
                  "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the S3 service"
                  },
                  "region": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The AWS region"
                  },
                  "bucket": {
                    "type": "string",
                    "minLength": 1,
                    "description": "An existing S3 bucket in which to store objects"
                  },
                  "credentials": {
                    "type": "object",
                    "properties": {
                      "accessKeyId": {
                        "type": "string",
                        "minLength": 1
                      },
                      "secretAccessKey": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "required": ["accessKeyId", "secretAccessKey"],
                    "additionalProperties": false,
                    "description": "Credentials of a user with S3 getObject and putObject permission on the above bucket.\n    If not provided here, you must ensure they're available as environment variables or in a shared credentials file.\n    See http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html | node configuring aws guide."
                  },
                  "keyLength": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 54,
                    "default": 54,
                    "description": "The length of the random share key to generate (not including prefix), up to 54 characters. Defaults to the full length."
                  },
                  "forcePathStyle": {
                    "type": "boolean",
                    "default": false,
                    "description": "Force path style URLs for S3 requests"
                  }
                },
                "required": ["service", "prefix", "region", "bucket"],
                "additionalProperties": false
              }
            ]
          },
          "default": [],
          "description": "List of available configurations for share urls."
        }
      },
      "additionalProperties": false,
      "default": {
        "maxRequestSize": 204800,
        "availablePrefixes": []
      },
      "description": "Configuration for the share service. If not defined share service will be disabled."
    },
    "feedback": {
      "type": "object",
      "properties": {
        "primaryId": {
          "type": "string",
          "minLength": 1,
          "default": "__default__",
          "description": "Which service of those defined in the options will be used when sending new feedback."
        },
        "options": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalParameters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "descriptiveLabel": {
                          "type": "string",
                          "minLength": 1
                        },
                        "name": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": ["descriptiveLabel", "name"],
                      "additionalProperties": false
                    }
                  },
                  "service": {
                    "type": "string",
                    "const": "github"
                  },
                  "issuesUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "Github API issues url. See https://docs.github.com/en/rest/reference/issues#create-an-issue for details"
                  },
                  "accessToken": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Github access token with permission to create issue."
                  },
                  "userAgent": {
                    "type": "string",
                    "default": "TerriaJS-Bot",
                    "description": "Http user agent."
                  }
                },
                "required": ["id", "service", "issuesUrl", "accessToken"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/properties/feedback/properties/options/items/anyOf/0/properties/id"
                  },
                  "additionalParameters": {
                    "$ref": "#/properties/feedback/properties/options/items/anyOf/0/properties/additionalParameters"
                  },
                  "service": {
                    "type": "string",
                    "const": "mail"
                  },
                  "smtpHost": {
                    "anyOf": [
                      {
                        "type": "string",
                        "pattern": "^(?!-)(?!.*--)(?!.*\\.\\.)(?!.*\\.$)[a-zA-Z0-9-]{1,63}(?<!-)(\\.[a-zA-Z0-9-]{1,63})*$"
                      },
                      {},
                      {
                        "type": "string",
                        "anyOf": [
                          {
                            "format": "ipv4"
                          },
                          {
                            "format": "ipv6"
                          }
                        ]
                      }
                    ],
                    "description": "Hostname or IP address of smtp server to connect to."
                  },
                  "smtpPort": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535,
                    "description": "Port of smtp server to connect to."
                  },
                  "secure": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether authentication should be done against SMPT server."
                  },
                  "auth": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Name of the user that will be used to connect to smtpServer."
                      },
                      "pass": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Password of the user that will be used to connect to smtpServer."
                      }
                    },
                    "required": ["user", "pass"],
                    "additionalProperties": false,
                    "description": "Authentication data."
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email to which feedback will be sent."
                  }
                },
                "required": ["id", "service", "smtpHost", "smtpPort", "email"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/properties/feedback/properties/options/items/anyOf/0/properties/id"
                  },
                  "additionalParameters": {
                    "$ref": "#/properties/feedback/properties/options/items/anyOf/0/properties/additionalParameters"
                  },
                  "service": {
                    "type": "string",
                    "const": "redmine"
                  },
                  "project_id": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Id of redmine project."
                  },
                  "issuesUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "Redmine API url for creating issues. See https://www.redmine.org/projects/redmine/wiki/Rest_Issues for details"
                  },
                  "username": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Username that will be used for authenticating on redmine and creating new issues."
                  },
                  "password": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Password for authenticating on redmine."
                  }
                },
                "required": [
                  "id",
                  "service",
                  "project_id",
                  "issuesUrl",
                  "username",
                  "password"
                ],
                "additionalProperties": false
              }
            ]
          }
        }
      },
      "additionalProperties": false,
      "default": {
        "primaryId": "__default__"
      },
      "description": "Configuration for the feedback service. If not defined feedback service will be disabled."
    },
    "proxy": {
      "type": "object",
      "properties": {
        "postSizeLimit": {
          "type": "integer",
          "minimum": 0,
          "default": 102400,
          "description": "The largest size, in bytes, of data that the proxy will send in a POST request."
        },
        "proxyAllDomains": {
          "type": "boolean",
          "default": false,
          "description": "If this setting is true, the allowProxyFor list is ignored, and all requests are accepted."
        },
        "allowProxyFor": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/properties/feedback/properties/options/items/anyOf/1/properties/smtpHost/anyOf/0"
              },
              {},
              {
                "type": "string",
                "anyOf": [
                  {
                    "format": "ipv4"
                  },
                  {
                    "format": "ipv6"
                  }
                ]
              }
            ]
          },
          "default": [],
          "description": "List of domains which the server is willing to proxy for. Subdomains are included automatically. It will be ignored if whitelistPath is defined and file exists."
        },
        "blacklistedAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "127.0.0.0/8",
            "::1/128",
            "169.254.0.0/16",
            "fe80::/10",
            "10.0.0.0/8",
            "172.16.0.0/12",
            "192.168.0.0/16",
            "fc00::/7",
            "0.0.0.0/8",
            "100.64.0.0/10",
            "192.0.0.0/24",
            "192.0.2.0/24",
            "198.18.0.0/15",
            "192.88.99.0/24",
            "198.51.100.0/24",
            "203.0.113.0/24",
            "224.0.0.0/4",
            "240.0.0.0/4",
            "255.255.255.255/32",
            "::/128",
            "2001:db8::/32",
            "ff00::/8"
          ],
          "description": "IP addresses to refuse to proxy for, even if they're resolved from a hostname that we would ordinarily allow. It will be ignored if blacklistPath is defined and file exists."
        },
        "whitelistPath": {
          "type": "string",
          "description": "Location of the file containing the list of domains which the server is willing to proxy for. Subdomains are included automatically. Each domain should be in its own row."
        },
        "blacklistPath": {
          "type": "string",
          "description": "Location of the file containing the list of IP addresses to refuse to proxy for, even if they're resolved from a hostname that would ordinarily be proxied. Each IP address should be in its own row. If your server has access to an IP range that is not accessible to clients of the proxy, and you want to ensure that the client can't get access to it through the proxy, it is vital that you add that IP range to this list. Any change to file content will be picked up automatically without restarting server."
        },
        "upstreamProxy": {
          "anyOf": [
            {
              "type": "string",
              "format": "uri"
            },
            {
              "anyOf": [
                {
                  "$ref": "#/properties/feedback/properties/options/items/anyOf/1/properties/smtpHost/anyOf/0"
                },
                {},
                {
                  "type": "string",
                  "anyOf": [
                    {
                      "format": "ipv4"
                    },
                    {
                      "format": "ipv6"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "Pass requests through to another proxy upstream."
        },
        "bypassUpstreamProxyHosts": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "description": "A list of hosts that should bypass the upstream proxy."
        },
        "appendParamToQueryString": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "regexPattern": {
                  "type": "string",
                  "description": "A regex pattern used to test whether parameters should be attached. Set to '.' to match everything."
                },
                "params": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Parameters that should be appended to the request."
                }
              },
              "required": ["regexPattern", "params"],
              "additionalProperties": false
            }
          },
          "description": "An array of options which you to inform which additional parameters are appended to the url querystring."
        },
        "proxyAuth": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": ["name", "value"],
                  "additionalProperties": false
                }
              },
              "authorization": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "default": {},
          "description": "A map of proxy authentication configurations."
        }
      },
      "additionalProperties": false,
      "default": {
        "postSizeLimit": 102400,
        "proxyAllDomains": false,
        "allowProxyFor": [],
        "blacklistedAddresses": [
          "127.0.0.0/8",
          "::1/128",
          "169.254.0.0/16",
          "fe80::/10",
          "10.0.0.0/8",
          "172.16.0.0/12",
          "192.168.0.0/16",
          "fc00::/7",
          "0.0.0.0/8",
          "100.64.0.0/10",
          "192.0.0.0/24",
          "192.0.2.0/24",
          "198.18.0.0/15",
          "192.88.99.0/24",
          "198.51.100.0/24",
          "203.0.113.0/24",
          "224.0.0.0/4",
          "240.0.0.0/4",
          "255.255.255.255/32",
          "::/128",
          "2001:db8::/32",
          "ff00::/8"
        ],
        "proxyAuth": {}
      },
      "description": "Configuration for the proxy service."
    },
    "trustProxy": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "number"
        }
      ],
      "default": false,
      "description": "\n    The value of the Express \"trust proxy\" application setting. Set this to\n    true if you want to provide publicly usable URLs behind a reverse proxy\n    For more details read\n    http://expressjs.com/en/guide/behind-proxies.html\n    http://expressjs.com/en/api.html#trust.proxy.options.table"
    },
    "serveStatic": {
      "type": "object",
      "properties": {
        "serveStatic": {
          "type": "boolean",
          "default": true
        },
        "resolvePathRelativeToWwwroot": {
          "type": "string",
          "default": "/index.html"
        },
        "resolveUnmatchedPathsWithIndexHtml": {
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false,
      "default": {
        "serveStatic": true,
        "resolvePathRelativeToWwwroot": "/index.html",
        "resolveUnmatchedPathsWithIndexHtml": false
      },
      "description": "Configuration for serving static files."
    },
    "csp": {
      "type": "object",
      "properties": {
        "scriptSrc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
        },
        "connectSrc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": ["*"]
        },
        "imgSrc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": ["'self'", "data:", "*"]
        },
        "frameSrc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "frameAncestors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "additionalProperties": false,
      "description": "Configuration for the Content Security Policy.",
      "default": {
        "scriptSrc": ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
        "connectSrc": ["*"],
        "imgSrc": ["'self'", "data:", "*"],
        "frameSrc": [],
        "frameAncestors": []
      }
    },
    "wwwroot": {
      "type": "string",
      "default": "./wwwroot"
    },
    "https": {
      "type": "object",
      "properties": {
        "keyPath": {
          "type": "string",
          "description": "Private key in PEM format. PEM allows the option of private key being encrypted. Encrypted keys will be decrypted with passphrase if provided."
        },
        "certPath": {
          "type": "string"
        },
        "passphrase": {
          "type": "string",
          "description": "Passphrase for the private key. If the key is encrypted, this option is required."
        },
        "redirectToHttps": {
          "type": "boolean",
          "default": false,
          "description": "Redirect HTTP requests to HTTPS. This is useful when running behind a reverse proxy that handles HTTPS."
        },
        "httpAllowedHosts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": ["localhost"],
          "description": "List of hosts that are allowed to make HTTP requests. This is mostly useful to allow non-https access to localhost in development."
        },
        "strictTransportSecurity": {
          "type": "string",
          "description": "The value of the Strict-Transport-Security header. This header tells browsers to always use HTTPS when connecting to the server. This is useful when running behind a reverse proxy that handles HTTPS. Ignored if redirectToHttps is false."
        }
      },
      "required": ["keyPath", "certPath"],
      "additionalProperties": false
    },
    "logLevel": {
      "type": "string",
      "enum": ["none", "log", "error", "warn", "debug", "verbose"],
      "default": "error",
      "description": "The log level to use."
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/draft-07/schema#"
}
